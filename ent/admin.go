// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/admin"
	"entgo.io/bug/ent/user"
	"entgo.io/ent/dialect/sql"
)

// Admin is the model entity for the Admin schema.
type Admin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminQuery when eager-loading is set.
	Edges AdminEdges `json:"edges"`
}

// AdminEdges holds the relations/edges for other nodes in the graph.
type AdminEdges struct {
	// TeamMembers holds the value of the team_members edge.
	TeamMembers []*User `json:"team_members,omitempty"`
	// TeamLeader holds the value of the team_leader edge.
	TeamLeader *User `json:"team_leader,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeamMembersOrErr returns the TeamMembers value or an error if the edge
// was not loaded in eager-loading.
func (e AdminEdges) TeamMembersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.TeamMembers, nil
	}
	return nil, &NotLoadedError{edge: "team_members"}
}

// TeamLeaderOrErr returns the TeamLeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminEdges) TeamLeaderOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.TeamLeader == nil {
			// The edge team_leader was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.TeamLeader, nil
	}
	return nil, &NotLoadedError{edge: "team_leader"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Admin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case admin.FieldID, admin.FieldAge:
			values[i] = new(sql.NullInt64)
		case admin.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Admin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Admin fields.
func (a *Admin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case admin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case admin.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				a.Age = int(value.Int64)
			}
		case admin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		}
	}
	return nil
}

// QueryTeamMembers queries the "team_members" edge of the Admin entity.
func (a *Admin) QueryTeamMembers() *UserQuery {
	return (&AdminClient{config: a.config}).QueryTeamMembers(a)
}

// QueryTeamLeader queries the "team_leader" edge of the Admin entity.
func (a *Admin) QueryTeamLeader() *UserQuery {
	return (&AdminClient{config: a.config}).QueryTeamLeader(a)
}

// Update returns a builder for updating this Admin.
// Note that you need to call Admin.Unwrap() before calling this method if this Admin
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Admin) Update() *AdminUpdateOne {
	return (&AdminClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Admin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Admin) Unwrap() *Admin {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Admin is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Admin) String() string {
	var builder strings.Builder
	builder.WriteString("Admin(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", a.Age))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Admins is a parsable slice of Admin.
type Admins []*Admin

func (a Admins) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
