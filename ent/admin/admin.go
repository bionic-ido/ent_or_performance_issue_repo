// Code generated by entc, DO NOT EDIT.

package admin

const (
	// Label holds the string label denoting the admin type in the database.
	Label = "admin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTeamMembers holds the string denoting the team_members edge name in mutations.
	EdgeTeamMembers = "team_members"
	// EdgeTeamLeader holds the string denoting the team_leader edge name in mutations.
	EdgeTeamLeader = "team_leader"
	// Table holds the table name of the admin in the database.
	Table = "admins"
	// TeamMembersTable is the table that holds the team_members relation/edge.
	TeamMembersTable = "users"
	// TeamMembersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TeamMembersInverseTable = "users"
	// TeamMembersColumn is the table column denoting the team_members relation/edge.
	TeamMembersColumn = "member_admin_id"
	// TeamLeaderTable is the table that holds the team_leader relation/edge.
	TeamLeaderTable = "users"
	// TeamLeaderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TeamLeaderInverseTable = "users"
	// TeamLeaderColumn is the table column denoting the team_leader relation/edge.
	TeamLeaderColumn = "lead_admin_id"
)

// Columns holds all SQL columns for admin fields.
var Columns = []string{
	FieldID,
	FieldAge,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
